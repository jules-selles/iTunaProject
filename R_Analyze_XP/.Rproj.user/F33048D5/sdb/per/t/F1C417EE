{
    "contents" : "#####################################\n### Model XP Gordon-Schaefer all calculation\n### Selles Jules\n### 08/2016\n####################################\n\n##---------------------------------\n## Packages\n\n# FLR package \n#source(\"C:/Users/jselles/Dropbox/These/These_Ifremer/BFT_DYNPop/OM_BFT/R.Script/Install.FLR.R\")# \n#Install.FLR()\nlibrary(fields)\nlibrary(RColorBrewer)\n\n# supplementary packages\n\n##--------------------------------\n## Parameters\n##--------------------------------\n\npath.plot <- \"C:/Users/jselles/Dropbox/These/These_Ifremer/Documents_Travail/Modele_XP/XP_protocole/Protocole/\"\ndo.save.plot=T\n  \n## Global parameters\nsimYear     <- 10\ngameTime    <- 25\n\n#---------------------------\ninitYear    <- 1990\nuncertainty <- 0.5\nnbPlayers   <- 3\n\n## Schaefer parameters\nK    <- 30\nr    <- 0.8\nBlim <- 8\nBmsy <- K/2\nYmsy <- (r*K)/4\n\n## Economic parameters // métier purse seine only \nP               <- 1\nbeta            <- 13\ntreshold        <- F\nA               <- 8\nta              <- 0\ndelta           <- 1/(1+ta)\n\nmaxHarvest      <- 5\nminHarvest      <- 0 \nnbChoices       <- 5\n\nstepChoices     <- (maxHarvest - minHarvest)/(nbChoices - 1)\nharvestChoice   <- seq(from=minHarvest,to=maxHarvest, by=stepChoices)\ntotalHarvest    <- seq(from=minHarvest,to=maxHarvest*nbPlayers,by=stepChoices)\notherHarvest    <- seq(from=minHarvest,to=maxHarvest*(nbPlayers),by= stepChoices)\n\n##--------------------------------\n## Model functions\n##--------------------------------\n\n## Schafer stantard model [10^3 t] \n##--------------------------------------------\n##Biologic part\n##\n## growth function [t] \ngrowth  <- function (b,b1=r,b2=K){\n  #b : biomass [t] // b1 : r -> growth rate [] // b2 : K -> carrying capacity [t]\n  growth=b1*b*(1-(b/b2))\n  growth <- round(growth,0)\n  return(growth)\n}\n\n## Schaefer biomass dynamic [t] \nSchaefer <- function (b,C=0){\n  #c : total catch [t]// b : biomasss [t]\n  biomass <- b + growth(b=b)- C\n  biomass <- round(biomass,0)\n  return(biomass)\n}\n\n##Economic part\n##\n## Cost function [$] \nCost <- function(stock,e1=beta,e2=A,b3=Blim ,capture=0,t= treshold){\n#e1 : Beta cost parameter [] // e2 : fixed cost linked to Blim [$] // b3 : Blim biomass threshold [t]// b : biomass [t] //\n#c : individual catch in tones [t]\n     \n  cost = matrix (NA, ncol=length(stock))\n  \n  for (i in 1: length(stock)){\n    if (i==1){\n      cost[i]<-e1*(log(Schaefer(K))-log(stock[i]))\n     }else {\n      cost[i]<-e1*(log(growth(b=stock[i-1]))-log(stock[i]))\n    }\n    \n  }\n  \n  return(cost)\n}\n\n## Cost function [$] \nCostplotInd <- function(stock,e1=beta,e2=A,b3=Blim ,capture=0,\n                        captureInd=0,t= treshold){\n  #e1 : Beta cost parameter [] // e2 : fixed cost linked to Blim [$] // b3 : Blim biomass threshold [t]// b : biomass [t] //\n  #c : individual catch in tones [t]\n  \n  cost = matrix (NA,nrow=length(capture), ncol=length(captureInd))\n  \n  for (i in 1:length(capture)){\n    for (j in 1:length(captureInd)){\n      cost[i,j]<-e1*(log(Schaefer(b=stock))-log(Schaefer(b=stock)-(capture[i]+captureInd[j])))*\n              (captureInd[j]/(capture[i]+captureInd[j]))\n       } \n    }\n  \n  #cost[which(cost=='Inf')]=0\n  #cost[which(cost=='Nan')]=0\n  #cost <- round(cost,0)\n  \n  return(cost)\n}\n\n## Cost function [$] \nCostplot <- function(stock,e1=beta,e2=A,b3=Blim ,capture=0,t= treshold){\n  #e1 : Beta cost parameter [] // e2 : fixed cost linked to Blim [$] // b3 : Blim biomass threshold [t]// b : biomass [t] //\n  #c : individual catch in tones [t]\n  \n  cost = matrix (NA,nrow=length(capture), ncol=length(stock))\n  \n  for (i in 1:length(capture)){\n    cost[i,]<-e1*(log(Schaefer(b=stock))-log(Schaefer(b=stock)-capture[i]))\n  } \n  \n  #cost[which(cost=='Inf')]=0\n  #cost[which(cost=='Nan')]=0\n  #cost <- round(cost,0)\n  \n  return(cost)\n}\n\n\n## Gain function [$] \nGain <- function(e3=P,c=0){\n#e3 : cte fish price per Kg [$/t]// c : individual catch in tones [t]\n  gain<- e3*c\n  gain <- round(gain,0)\n  return(gain)\n}\n\n## Profit function [10^3 $] \nProfit <- function (catch,biomass){\n  profit <- Gain(c=catch) - CostPlotind(stock=biomass,capture=catch)\n  profit <- round(profit,0)\n  return(profit)\n}\n\n## Profit function [10^3 $] \nProfitInd <- function (catch,catchInd,biomass){\n  \n  cc     = CostplotInd(stock=biomass,\n                       capture=catch,captureInd=catchInd)\n  profit = matrix(data=NA,nrow=dim(cc)[1],ncol=dim(cc)[2])\n  \n  for (i in 1:dim(cc)[1]){\n    profit[i,] <- Gain(c=catchInd) - cc[i,]\n    #profit <- round(profit,0)\n  }\n  profit = round(profit,1)\n  \n  return(profit)\n}\n\n\n\n## Profit function [10^3 $] \nProfitplot <- function (catch,biomass){\n  profit <- Gain(c=catch) - Costplot(stock=biomass,capture=catch)\n  profit <- round(profit,1)\n  return(profit)\n}\n\n\n## Net Present Value function [10^3 $] \nNPV <- function(cashFlow, time, discountRate){\n# cashFlow : profit for each period t until T (time) [10¨3 $] // time : [y] // discountRate : []\n   netPresentValue <- cumsum(net/(1+discountRate)^time)\n   return(netPresentValue)\n}\n\n\n#######################################\n## Optimisation under constraint process\n## Optimal value B0\n\nf.PV <- function(x) {\n  f.x <-  ( (delta* ( P - (beta/ (round(x,0) + round(r*x*(1-(x/K)),0) ) ) ) * (1+r*(1-(2*round(x,0)/K))) ) - (P-(beta/round(x,0))) )^2\n  # return function value\n  return(f.x)\n}\n\nout.B0 <- optimize(f.PV,lower = 1, upper = 30, tol = 0.0001)\n\n\nB0   <- out.B0$minimum\nY0   <- growth(b=B0)\n\n\n#######################################\n## Optimisation under constraint process\n\n## here markov chain analysis\n\noptB=19 #round(B0) ( multiple de 3 obligatoirement)\n\nprof = matrix(data = NA, nrow = 1, ncol = gameTime)\n\nb0   = K\nc0   = round((b0 - optB)/ nbPlayers)* nbPlayers  \n\nb    = matrix(data = NA, nrow = 1, ncol = gameTime)\nb[1] = b0\nca    = matrix(data = NA, nrow = 1, ncol = gameTime)\nca[1] = c0\n\nfor (i in 1:(gameTime - 1)){\n\n    prof[i]   = Profitplot(catch= ca[i] ,biomass= b[i])\n    \n    b[i+1] = Schaefer(b=b[i],C=ca[i])\n    ca[i+1] = growth(b=b[i+1])\n    \n    if( i==(gameTime - 1)){\n      prof[i+1]   = Profitplot(catch= ca[i+1] ,biomass= b[i+1])\n    }\n\n}\n\npayoff.opt=sum(prof)\n\n\n\nif (do.save.plot==T){\n  png(filename=paste(path.plot,\"OPtimal_path.png\",sep=\"\"), width = 8, height = 8, units = 'in', res = 300)}\n\nlayout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))\n\nplot(seq(1,gameTime,1),b,xlab=\"Years\",ylab=\"Biomass\",type='o',lwd=2,ylim=c(0,30))\nabline(h=K/2, col='red',lty=6,lwd=1)\ntext(x=20,y=K/2.3,labels=\"Bmsy\",col='red')\n#abline(v=round(0.5*((beta/(P*r))+K),0), col='green',lty=6,lwd=1)\ngrid()\n\ntitle(\"Optimal stock\")\n\nplot(seq(1,gameTime,1),prof,xlab=\"Years\",ylab=\"Profit\",type='o',lwd=2,ylim=c(0,6))\n#abline(v=round(0.5*((beta/(P*r))+K),0), col='green',lty=6,lwd=1)\ngrid()\n\ntitle(\"Optimal profit\")\n\nplot(seq(1,gameTime,1),ca,xlab=\"Years\",ylab=\"Harvest\",type='o',lwd=2,ylim=c(0,15))\n#abline(v=round(0.5*((beta/(P*r))+K),0), col='green',lty=6,lwd=1)\ngrid()\n\ntitle(\"Optimal harvest\")\n\n\nif (do.save.plot==T){\n  dev.off()\n}\n\n\n#######################################\n## Open access dynamique \n\n## \n\n\n\n\n##############\n## Plot functions\n#########################\nyield.vec=seq(0,maxHarvest*nbPlayers,by = 1)\ny = matrix( \n  yield.vec, \n  nrow=length(yield.vec), \n  ncol=length(yield.vec),byrow = TRUE)\n\nstock.vec=seq(0,K,by = 1)\ns = matrix( \n  stock.vec, \n  nrow=length(stock.vec), \n  ncol=length(stock.vec))\n\n################################\"\"\n## individual profit Table for a stock level \nIndyield.vec=seq(0,maxHarvest*(nbPlayers-1),by = 1)\nMYyield=seq(0,maxHarvest,by = 1)\n\npp= ProfitInd(biomass = 25 ,catch = Indyield.vec , catchInd = MYyield)\nrownames(pp)=Indyield.vec\ncolnames(pp)=MYyield\n\nprint(pp)\n\n########################\"\"\n## total cost\n\nc =Costplot(stock=(stock.vec),capture=(yield.vec))\n\n\nif (do.save.plot==T){\n  png(filename=paste(path.plot,\"Cost.png\",sep=\"\"), width = 4, height = 4, units = 'in', res = 300)\n}\n  image.plot(z=t(c),y=yield.vec,x=stock.vec,xlab='Stock',ylab='Harvest',\n           zlim=c(0,max(c[which(c!=\"Inf\")],na.rm=TRUE)),col=brewer.pal(9,\"PuBu\"))\n  contour(z=t(c),y=yield.vec,x=stock.vec,zlim=c(0,max(c[which(c!=\"Inf\")],na.rm=TRUE)),  nlevels = 9,add=T,labcex=1,lwd=1)\n\n\ntitle(\"Cost\")\n\nif (do.save.plot==T){\n  dev.off()\n}\n\n###########################\"\"\n## individual gain\n\n\nif (do.save.plot==T){\n  png(filename=paste(path.plot,\"Gain.png\",sep=\"\"), width = 4, height = 4, units = 'in', res = 300)\n}\n\ngain = round(Gain(c=(yield.vec)),0)\ngg = matrix(data=gain,nrow=length(gain), ncol=length(stock.vec))\n\n  image.plot(z=t(gg),y=yield.vec,x=stock.vec,xlab='Stock',ylab='Harvest',\n             zlim=c(0,max(gg)),col=brewer.pal(9,\"PuBu\"))\n  contour(z=t(gg),y=yield.vec,x=stock.vec,zlim=c(0,max(gg)),  nlevels = 9,add=T,labcex=1,lwd=1)\n\ntitle(\"Gain\")\n\n\nif (do.save.plot==T){\n  dev.off()\n}\n\n#############################\n## individual profit\n\np = Profitplot(biomass=(stock.vec),catch=yield.vec)\n\nif (do.save.plot==T){\n  png(filename=paste(path.plot,\"Profit.png\",sep=\"\"), width = 4, height = 4, units = 'in', res = 300)\n}\n\nimage.plot(z=t(p),y=yield.vec,x=stock.vec,xlab='Stock',ylab='Harvest',zlim=c(-6,6),\n           col=brewer.pal(9,\"RdBu\"))\ncontour(z=t(p),y=yield.vec,x=stock.vec,zlim=c(c(-6,6)),  nlevels = 9,add=T,labcex=1,lwd=1)\n#zlim=c(min(as.vector(p[p!='-Inf']),na.rm=TRUE),max(as.vector(p[p!='-Inf'])\ntitle(\"Profit\")\n\nif (do.save.plot==T){\n  dev.off()\n}\n\n###############################\"\n## Growth\n\ng =  growth(b=stock.vec,b1=r,b2=K)\n\nif (do.save.plot==T){\n  png(filename=paste(path.plot,\"Growth.png\",sep=\"\"), width = 4, height = 4, units = 'in', res = 300)\n \n  \n}\n\nplot(stock.vec,g,xlab=\"stock\",ylab=\"growth\",type='l',lwd=2)\nabline(v=K/2, col='red',lty=6,lwd=1)\n#abline(v=round(0.5*((beta/(P*r))+K),0), col='green',lty=6,lwd=1)\ngrid()\n\ntitle(\"Growth Function\")\n\nif (do.save.plot==T){\n  dev.off()\n  \n}\n\n\n#######################################\n## Projection stock\n\n\n\n\n\n\n\n\n\n        ",
    "created" : 1480952015965.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1602197385",
    "id" : "F1C417EE",
    "lastKnownWriteTime" : 1481446575,
    "path" : "C:/Users/jselles/Dropbox/These/These_Ifremer/Documents_Travail/Modele_XP/XP_protocole/R_scripts/Xp_calculus.R",
    "project_path" : "Xp_calculus.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}